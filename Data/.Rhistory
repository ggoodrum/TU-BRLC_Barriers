Node_attributes,
Outlet_node,
graphFile){
# Select edge data and remove nodes not associated with a reach
data.edges <- inData %>% select({{From_field}},
{{To_field}},
{{Edge_attributes}}) %>%
filter({{To_field}} %in% {{From_field}})
# Set edge type field
data.edges <- data.edges %>% mutate(type = ifelse(get({{EdgeType_field}}) == "",
'Confluence',
get({{EdgeType_field}})))
# Generate igraph object with edge attributes
data.graph <- graph_from_data_frame(data.edges)
# Select node data
data.nodes <- inData %>% select({{From_field}},
{{Node_attributes}})
# Attribute nodes
for(col in colnames(data.nodes)){
data.graph <- set_vertex_attr(data.graph,
name = col,
index = V(data.graph),
value = sapply(V(data.graph)$name, function(x){
unlist(data.nodes %>%
filter(From_Node == x) %>%
.[col])
}))
}
# Assign network directionality based on outlet reach
data.graph <- set_graph_directionality(data.graph,
field_name = 'name',
outlet_name = as.character(Outlet_node))
# Initialize passability fields
field.pass <- c('pass_u', 'pass_d')
for(i in 1:length(field.pass)){
data.graph <- set_edge_attr(data.graph,
field.pass[i],
value = 1.0)
}
# Identify outlet edge for plotting
index.outlet <- which(V(data.graph)$name == Outlet_node)
# Set plotting dimensions
size.plot <- data.frame(node  = NA,
edge  = NA,
arrow = NA,
text  = NA)
ifelse(length(V(data.graph)) <= 100,  size.plot[1,] <- c(0.1, 1, 10, 5),
ifelse(length(V(data.graph)) <= 1000, size.plot[1,] <- c(0.05, 0.5, 5, 2.5),
size.plot[1,] <- c(0.01, 0.1, 1, 0.5)))
# Plot to confirm
gg0 <- ggnetwork(data.graph,
layout =  layout_as_tree(data.graph %>% as.undirected, root = index.outlet),
scale = FALSE)
plot <-
ggplot(gg0, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_nodes(alpha = 0.3,
size = size.plot$node) +
geom_edges(alpha = 0.5,
arrow = arrow(length = unit(size.plot$arrow, "pt"), type = "closed"),
linewidth = size.plot$edge,
aes(color = type)) +
scale_color_viridis(discrete = TRUE)+
geom_nodetext(aes(label = name), fontface = "bold",
size = size.plot$text) +
theme_blank()
ggsave(graphFile, plot = plot,
width = 40, height = 40, units = 'cm',
dpi = 600)
return(data.graph)
}
# ---------------------------------------------------------------------------- #
# FUNCTION: join_edge_attributes() - Function that joins edge attributes based on a common identifier field.
#                                    Function currently hard-coded for 'UID', 'Type_R', and 'Pass_R' fields.
join_edge_attributes <- function(inGraph, inData, field.pass){
# Initialize output
outGraph <- inGraph
# Join pass field
outGraph <- set_edge_attr(outGraph,
name = as.name(field.pass),
index = E(outGraph),
value = as.numeric(sapply(E(outGraph)$UID, function(x){
unlist(inData %>%
filter(UID == x) %>%
.[[as.name(field.pass)]])
})))
# Convert pass field to numeric
outGraph <- set_edge_attr(outGraph,
name = as.name(field.pass),
index = E(outGraph),
value = ifelse(E(outGraph)$type == 'Junction',
1.0, E(outGraph)$Pass_R))
# Return output
return(outGraph)
}
# ---------------------------------------------------------------------------- #
# FUNCTION: calculate_dci() - Function calculates symmetric and aysmmetric DCI from a provided igraph object,
#                                    dataframe of barrier passability, and fields indicating the
#                                    passability, and weight fields of the input tables.
calculate_dci <- function(inGraph, scenario.id, field.pass, field.weight){
# Initialize output table
data.out <- data.frame(Scenario = character(0),
DCI_symm = numeric(0),
DCI_asym = numeric(0))
# Attribute pass_u and pass_d with joined passability values
field.pass <- c('pass_u', 'pass_d')
graph.out <- inGraph # NOTE: Must change graph here so that both pass_u and pass_d update
for(i in 1:length(field.pass)){
graph.out <- set_edge_attr(graph.out,
field.pass[i],
value = E(inGraph)$Pass_R)
}
# Calculate DCI.symmetric
dci.symm <- index_calculation(graph = graph.out,
weight = field.weight,
B_ij_flag = FALSE,
index_type = 'full',
dir_fragmentation_type = 'symmetric')
# Calculate DCI.asymmetric
dci.asym <- index_calculation(graph = graph.out,
weight = field.weight,
B_ij_flag = FALSE,
index_type = 'full',
dir_fragmentation_type = 'asymmetric')
# Attribute output
data.out <- data.out %>% add_row(Scenario = scenario.id,
DCI_symm = dci.symm$index,
DCI_asym = dci.asym$index)
# Return output
# return(graph.out)
return(data.out)
}
# ---------------------------------------------------------------------
# Declare data
file.data.results <- paste0(getwd(), '/Data_Results.xlsx')
# Load data
data.results <- rio::import_list(file = file.data.results)
# Declare stream network
data.network <- data.results[['Data_Network']]
# Add Field: UID (unique identifers for stream network nodes)
# Generate sequence of random numbers
set.seed(22)
# uid.seq <- str_pad(sample(999999, size = nrow(data.network)), width = 6, pad = '0')
data.network <- data.network %>%
mutate(UID = paste0('UID_', str_pad(sample(x = 999999, size = n()), width = 6, pad = '0'))) %>%
as.data.frame
# Add Field: Barrier_Expected (whether node is a dam/diversion/culvert or junction)
data.network <- data.network %>%
mutate(Barrier_Expected = ifelse(is.na(BarrierType), 'Junction', BarrierType)) %>%
rename(Length_KM = Length_km) %>%
as.data.frame
# Declare connectivity fields
graph.fields        <- c('From_Node', 'To_Node', 'Length_KM', 'UID', 'Barrier_Expected') # Fields to build graph with
attributes.edgeType <- 'Barrier_Expected' # String corresponding to barrier type.
attributes.edge     <- c('UID', 'Barrier_Expected') # Strings corresponding to edge (barrier) attributes.
attributes.node     <- c('From_Node', 'Length_KM') # String corresponding to node (stream segment) attributes. A field to weight connectivity indices is required, commonly assessed as length or HSI.
field.weight        <- 'Length_KM' # String corresponding to node attribute used to weight connectivity indices.
file.graph          <- 'iGraph_Network.png' # String indicating the name of the output file used to check igraph structure.
# Filter data for igraph
# NOTE: Input data represents the edge list
data.graph <- data.network %>% select({{graph.fields}})
# Check network structure
data.check <- network_check(inData = data.graph,
From_field = From_Node,
To_field = To_Node)
# Set outlet node as the 'From_Node' on the terminal reach
outlet <- data.check$Terminal_Reaches$From_Node
# Generate igraph object
graph.stream <- generate_attributed_igraph(inData          = data.graph,
From_field      = From_Node,
To_field        = To_Node,
EdgeType_field  = {{attributes.edgeType}},
Edge_attributes = {{attributes.edge}},
Node_attributes = {{attributes.node}},
Outlet_node     = outlet,
graphFile       = file.graph)
index_calculation(graph = graph.stream,
weight = field.weight,
B_ij_flag = FALSE,
dir_fragmentation_type = 'symmetric')
# Declare barrier data
data.barriers <- data.network %>%
filter(BarrierType != 'Junction') %>%
mutate(Mitigated = ifelse(Pass_Before == Pass_After, 'No', 'Yes'),
YearMitigated = ifelse(Pass_Before == Pass_After, NA, YearMitigated)) %>%
mutate(Pass_Before = ifelse(UID == 'UID_036254', Pass_After, Pass_Before)) %>%
mutate(YearMitigated = ifelse(SourceID == 'TU_DIV_SW-01', 2005, YearMitigated)) %>%
select(UID, YearMitigated, Pass_Before, Pass_After) %>%
as.data.frame
View(data.barriers)
# Declare barrier data
data.barriers <- data.network %>%
filter(BarrierType != 'Junction') %>%
mutate(Mitigated = ifelse(Pass_Before == Pass_After, 'No', 'Yes'),
YearMitigated = ifelse(Pass_Before == Pass_After, NA, YearMitigated)) %>%
mutate(Pass_Before = ifelse(UID == 'UID_036254', Pass_After, Pass_Before)) %>%
mutate(YearMitigated = ifelse(SourceID == 'TU_DIV_SW-01', 2005, YearMitigated)) %>%
select(From_Node, UID, YearMitigated, Pass_Before, Pass_After) %>%
as.data.frame
data.barriers
# Determine barrier removal timestep for analysis
year.rmv <- unique(data.barriers %>% filter(!is.na(YearMitigated)) %>% select(YearMitigated)) %>%
dplyr::arrange(YearMitigated)
year.rmv
# Generate list of barrier passability scenarios (i.e. changes to pass through time)
scenarios.barrier <- list()
# Base scenario with all barriers
scenarios.barrier[['SCN_0000_AllBarriers']] <- data.barriers %>% mutate(Pass_R = Pass_Before) %>% as.data.frame
# Create list of barrier scenarios
for(i in 1:nrow(year.rmv)){
scenario.id <- paste0('SCN_', year.rmv[['YearMitigated']][[i]])
scenarios.barrier[[scenario.id]] <- data.barriers %>%
mutate(Pass_R = ifelse(is.na(YearMitigated) | YearMitigated > year.rmv[['YearMitigated']][[i]],
Pass_Before, Pass_After)) %>%
as.data.frame
}
# Alternative scenario for North Eden w/o Diversion Structure installed
# NOTE: NE Creek diversion is a seasonally-installed earthwork dam that creates an impassable barrier
#       but doesn't require infrastructure work for removal
# Lookup TU_DIV_NE-01: View(data.network %>% filter(BarrierType != 'Junction'))
scenarios.barrier[['SCN_2025_Alt']] <- scenarios.barrier[['SCN_2025']] %>%
mutate(Pass_R = ifelse(UID == 'UID_717090', 1, Pass_R)) %>%
as.data.frame
View(data.network %>% filter(BarrierType != 'Junction'))
# Alternative scenario for North Eden w/o Diversion Structure installed
# NOTE: NE Creek diversion is a seasonally-installed earthwork dam that creates an impassable barrier
#       but doesn't require infrastructure work for removal
# Lookup TU_DIV_NE-01: View(data.network %>% filter(BarrierType != 'Junction'))
scenarios.barrier[['SCN_2025_Alt']] <- scenarios.barrier[['SCN_2025']] %>%
mutate(Pass_R = ifelse(UID == 'UID_074584', 1, Pass_R)) %>%
as.data.frame
View(data.check)
# Declare inputs
connectivity.field.pass   <- 'Pass_R'
connectivity.field.weight <- 'Length_KM'
# Initialize output
connectivity.out <- data.frame(Scenario = character(0),
DCI_symm = numeric(0),
DCI_asym = numeric(0))
# Calculate DCI connectivity for all barrier passability scenarios in list
for(i in 1:length(scenarios.barrier)){
# Declare scenario
scenario.id <- names(scenarios.barrier)[[i]]
# Join scenario barrier passability data to network
graph.barriers <- join_edge_attributes(inGraph = graph.stream,
inData = scenarios.barrier[[i]],
field.pass = 'Pass_R')
# Calculate DCI
data.connectivity <- calculate_dci(inGraph = graph.barriers,
scenario.id = scenario.id,
field.pass = 'Pass_R',
field.weight = 'Length_KM')
# Add data to output
connectivity.out <- rbind(connectivity.out, data.connectivity)
}
connectivity.out
data.network %>%
filter(! Barrier_Expected %in% c('Junction', 'Terminus')) %>%
filter(Pass_Before != Pass_After) %>%
as.data.frame
connectivity.ou
connectivity.out
data.network %>%
filter(! Barrier_Expected %in% c('Junction', 'Terminus')) %>%
filter(Pass_Before != Pass_After) %>%
select(YearMitigated, SourceID, UID) %>%
as.data.frame
data.network %>%
filter(! Barrier_Expected %in% c('Junction', 'Terminus')) %>%
filter(Pass_Before != Pass_After) %>%
select(YearMitigated, SourceID, UID, Pass_Before, Pass_After) %>%
as.data.frame
data.network %>%
mutate(YearMitigated = ifelse(SourceID == 'TU_DIV_SW-01', 2005, YearMitigated)) %>%
filter(! Barrier_Expected %in% c('Junction', 'Terminus')) %>%
filter(Pass_Before != Pass_After) %>%
select(YearMitigated, SourceID, UID, Pass_Before, Pass_After) %>%
as.data.frame
data.network %>%
mutate(YearMitigated = ifelse(SourceID == 'TU_DIV_SW-01', 2005, YearMitigated)) %>%
filter(! Barrier_Expected %in% c('Junction', 'Terminus')) %>%
filter(Pass_Before != Pass_After) %>%
select(YearMitigated, SourceID, UID, Pass_Before, Pass_After) %>%
arrange(YearMitigated) %>%
as.data.frame
data.network %>%
mutate(YearMitigated = ifelse(SourceID == 'TU_DIV_SW-01', 2005, YearMitigated)) %>%
filter(! Barrier_Expected %in% c('Junction', 'Terminus')) %>%
filter(Pass_Before != Pass_After) %>%
select(YearMitigated, SourceID, UID, BarrierName, Pass_Before, Pass_After) %>%
arrange(YearMitigated) %>%
as.data.frame
# Lookup barriers by year
barriers.rmv <- data.network %>%
mutate(YearMitigated = ifelse(SourceID == 'TU_DIV_SW-01', 2005, YearMitigated)) %>%
filter(! Barrier_Expected %in% c('Junction', 'Terminus')) %>%
filter(Pass_Before != Pass_After) %>%
select(YearMitigated, SourceID, UID, BarrierName, Pass_Before, Pass_After) %>%
arrange(YearMitigated) %>%
as.data.frame
str(connectivity.out)
connectivity.data <- connectivity.out %>%
mutate(YearMitigated = as.numeric(substr(Scenario,5,8))) %>%
as.data.frame
str(connectivity.data)
str(barriers.rmv)
#   as.data.frame
connectivity.data <- connectivity.out %>%
mutate(YearMitigated = as.numeric(substr(Scenario,5,8))) %>%
left_join(barriers.rmv, by = c('YearMitigated')) %>%
as.data.frame
View(connectivity.data)
str(connectivity.data)
# Initialize output
data.results[['Connectivity_BearLake']] <- connectivity.out
# Declare working directory
pwd <- paste0(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(pwd)
# Write output
export(data.results, file = 'Data_Results.xlsx')
# Declare working directory
pwd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(pwd)
# Declare data
file.data.results <- paste0(getwd(), '/Data_Results.xlsx')
# Load data
data.results <- rio::import_list(file = file.data.results)
# Declare data
data.dci <- data.results[['Connectivity_BearLake']]
View(data.dci)
connectivity.data
# Initialize output
data.results[['Connectivity_BearLake']] <- connectivity.data
# ---------------------------------------------------------------------------- #
# Declare working directory
pwd <- paste0(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(pwd)
# Write output
export(data.results, file = 'Data_Results.xlsx')
# Declare working directory
pwd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(pwd)
# Declare data
file.data.results <- paste0(getwd(), '/Data_Results.xlsx')
# Load data
data.results <- rio::import_list(file = file.data.results)
# Generate time series for plotting
data.dci.ts <- data.frame(Year = c(seq(1990, 2035, by = 1))) %>%
as.data.frame
# Declare data
file.data.results <- paste0(getwd(), '/Data_Results.xlsx')
# Load data
data.results <- rio::import_list(file = file.data.results)
# ---------------------------------------------------------------------------- #
# DATA PROCESSING
# Declare data
data.dci <- data.results[['Connectivity_BearLake']]
data.dci
# Generate time series for plotting
data.dci.ts <- data.frame(Year = c(seq(1990, 2035, by = 1))) %>%
left_join(data.dci %>%
filter(Scenario != 'SCN_2025_Alt') %>%
select(YearMitigated, DCI_symm) %>%
rename('Year' = YearMitigated),
by = 'Year') %>%
as.data.frame
View(data.dci.ts)
data.frame(Year = c(seq(1990, 2035, by = 1))) %>%
left_join(data.dci %>%
filter(Scenario != 'SCN_2025_Alt') %>%
select(YearMitigated, DCI_symm) %>%
rename('Year' = YearMitigated),
by = 'Year') %>%
tidyr::fill(DCI_symm) %>%
as.data.frame
data.dci
data.frame(Year = c(seq(1990, 2035, by = 1))) %>%
# Join main DCI estimates
left_join(data.dci %>%
filter(Scenario != 'SCN_2025_Alt') %>%
select(YearMitigated, DCI_symm) %>%
rename('Year' = YearMitigated),
by = 'Year') %>%
left_join(data.dci %>%
filter(Scenario != 'SCN_2025') %>%
select(YearMitigated, DCI_symm) %>%
rename('Year' = YearMitigated,
'DCI_symm_alt' = DCI_symm),
by = 'Year') %>%
as.data.frame
data.frame(Year = c(seq(1990, 2035, by = 1))) %>%
# Join main DCI estimates
left_join(data.dci %>%
filter(Scenario != 'SCN_2025_Alt') %>%
select(YearMitigated, DCI_symm) %>%
rename('Year' = YearMitigated),
by = 'Year') %>%
left_join(data.dci %>%
filter(Scenario != 'SCN_2025') %>%
select(YearMitigated, DCI_symm) %>%
rename('Year' = YearMitigated,
'DCI_symm_alt' = DCI_symm),
by = 'Year') %>%
fill(c(DCI_symm, DCI_symm_alt, .direction = 'down')) %>%
as.data.frame
data.frame(Year = c(seq(1990, 2035, by = 1))) %>%
# Join main DCI estimates
left_join(data.dci %>%
filter(Scenario != 'SCN_2025_Alt') %>%
select(YearMitigated, DCI_symm) %>%
rename('Year' = YearMitigated),
by = 'Year') %>%
left_join(data.dci %>%
filter(Scenario != 'SCN_2025') %>%
select(YearMitigated, DCI_symm) %>%
rename('Year' = YearMitigated,
'DCI_symm_alt' = DCI_symm),
by = 'Year') %>%
fill(c(DCI_symm, DCI_symm_alt), .direction = 'down') %>%
as.data.frame
data.dci
data.frame(Year = c(seq(1990, 2035, by = 1))) %>%
# Join main DCI estimates
left_join(data.dci %>%
filter(Scenario != 'SCN_2025_Alt') %>%
select(YearMitigated, DCI_symm) %>%
rename('Year' = YearMitigated),
by = 'Year') %>%
left_join(data.dci %>%
filter(Scenario != 'SCN_2025') %>%
select(YearMitigated, DCI_symm) %>%
rename('Year' = YearMitigated,
'DCI_symm_alt' = DCI_symm),
by = 'Year') %>%
mutate(DCI_symm = ifelse(Year <= min(data.dci$YearMitigated), min(data.dci$DCI_symm), DCI_symm)) %>%
fill(c(DCI_symm, DCI_symm_alt), .direction = 'down') %>%
as.data.frame
min(data.dci$YearMitigated)
min(data.dci$DCI_symm), DCI_symm)
min(data.dci$DCI_symm)
data.frame(Year = c(seq(1990, 2035, by = 1))) %>%
# Join main DCI estimates
left_join(data.dci %>%
filter(Scenario != 'SCN_2025_Alt') %>%
select(YearMitigated, DCI_symm) %>%
rename('Year' = YearMitigated),
by = 'Year') %>%
left_join(data.dci %>%
filter(Scenario != 'SCN_2025') %>%
select(YearMitigated, DCI_symm) %>%
rename('Year' = YearMitigated,
'DCI_symm_alt' = DCI_symm),
by = 'Year') %>%
mutate(DCI_symm = ifelse(Year <= data.dci$YearMitigated[2], min(data.dci$DCI_symm), DCI_symm)) %>%
fill(c(DCI_symm, DCI_symm_alt), .direction = 'down') %>%
as.data.frame
data.frame(Year = c(seq(1990, 2035, by = 1))) %>%
# Join main DCI estimates
left_join(data.dci %>%
filter(Scenario != 'SCN_2025_Alt') %>%
select(YearMitigated, DCI_symm) %>%
rename('Year' = YearMitigated),
by = 'Year') %>%
left_join(data.dci %>%
filter(Scenario != 'SCN_2025') %>%
select(YearMitigated, DCI_symm) %>%
rename('Year' = YearMitigated,
'DCI_symm_alt' = DCI_symm),
by = 'Year') %>%
mutate(DCI_symm = ifelse(Year <= data.dci$YearMitigated[2], min(data.dci$DCI_symm), DCI_symm),
DCI_symm_alt = ifelse(Year <= data.dci$YearMitigated[2], min(data.dci$DCI_symm), DCI_symm)) %>%
fill(c(DCI_symm, DCI_symm_alt), .direction = 'down') %>%
as.data.frame
data.frame(Year = c(seq(1990, 2035, by = 1))) %>%
# Join main DCI estimates
left_join(data.dci %>%
filter(Scenario != 'SCN_2025_Alt') %>%
select(YearMitigated, DCI_symm) %>%
rename('Year' = YearMitigated),
by = 'Year') %>%
left_join(data.dci %>%
filter(Scenario != 'SCN_2025') %>%
select(YearMitigated, DCI_symm) %>%
rename('Year' = YearMitigated,
'DCI_symm_alt' = DCI_symm),
by = 'Year') %>%
mutate(DCI_symm = ifelse(Year < data.dci$YearMitigated[2], min(data.dci$DCI_symm), DCI_symm),
DCI_symm_alt = ifelse(Year < data.dci$YearMitigated[2], min(data.dci$DCI_symm), DCI_symm)) %>%
fill(c(DCI_symm, DCI_symm_alt), .direction = 'down') %>%
as.data.frame
# Generate time series for plotting
data.dci.ts <- data.frame(Year = c(seq(1990, 2035, by = 1))) %>%
# Join main DCI estimates
left_join(data.dci %>%
filter(Scenario != 'SCN_2025_Alt') %>%
select(YearMitigated, DCI_symm) %>%
rename('Year' = YearMitigated),
by = 'Year') %>%
left_join(data.dci %>%
filter(Scenario != 'SCN_2025') %>%
select(YearMitigated, DCI_symm) %>%
rename('Year' = YearMitigated,
'DCI_symm_alt' = DCI_symm),
by = 'Year') %>%
mutate(DCI_symm = ifelse(Year < data.dci$YearMitigated[2], min(data.dci$DCI_symm), DCI_symm),
DCI_symm_alt = ifelse(Year < data.dci$YearMitigated[2], min(data.dci$DCI_symm), DCI_symm)) %>%
fill(c(DCI_symm, DCI_symm_alt), .direction = 'down') %>%
as.data.frame
lwd.lines <- 0.5
lwd.borders <- 0.25
size.text.legend <- 10
size.text.axis <- 10
size.text.axis.title <- 11
