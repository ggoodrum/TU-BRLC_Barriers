linewidth = size.plot$edge,
aes(color = type)) +
scale_color_viridis(discrete = TRUE)+
geom_nodetext(aes(label = name), fontface = "bold",
size = size.plot$text) +
theme_blank()
ggsave(graphFile, plot = plot,
width = 40, height = 40, units = 'cm',
dpi = 600)
return(data.graph)
}
# ---------------------------------------------------------------------------- #
# FUNCTION: join_edge_attributes() - Function that joins edge attributes based on a common identifier field.
#                                    Function currently hard-coded for 'UID', 'Type_R', and 'Pass_R' fields.
join_edge_attributes <- function(inGraph, inData, field.pass){
# Initialize output
outGraph <- inGraph
# Join pass field
outGraph <- set_edge_attr(outGraph,
name = as.name(field.pass),
index = E(outGraph),
value = as.numeric(sapply(E(outGraph)$UID, function(x){
unlist(inData %>%
filter(UID == x) %>%
.[[as.name(field.pass)]])
})))
# Convert pass field to numeric
outGraph <- set_edge_attr(outGraph,
name = as.name(field.pass),
index = E(outGraph),
value = ifelse(E(outGraph)$type == 'Junction',
1.0, E(outGraph)$Pass_R))
# Return output
return(outGraph)
}
# ---------------------------------------------------------------------------- #
# FUNCTION: calculate_dci() - Function calculates symmetric and aysmmetric DCI from a provided igraph object,
#                                    dataframe of barrier passability, and fields indicating the
#                                    passability, and weight fields of the input tables.
calculate_dci <- function(inGraph, scenario.id, field.pass, field.weight){
# Initialize output table
data.out <- data.frame(Scenario = character(0),
DCI_symm = numeric(0),
DCI_asym = numeric(0))
# Attribute pass_u and pass_d with joined passability values
field.pass <- c('pass_u', 'pass_d')
graph.out <- inGraph # NOTE: Must change graph here so that both pass_u and pass_d update
for(i in 1:length(field.pass)){
graph.out <- set_edge_attr(graph.out,
field.pass[i],
value = E(inGraph)$Pass_R)
}
# Calculate DCI.symmetric
dci.symm <- index_calculation(graph = graph.out,
weight = field.weight,
B_ij_flag = FALSE,
index_type = 'full',
dir_fragmentation_type = 'symmetric')
# Calculate DCI.asymmetric
dci.asym <- index_calculation(graph = graph.out,
weight = field.weight,
B_ij_flag = FALSE,
index_type = 'full',
dir_fragmentation_type = 'asymmetric')
# Attribute output
data.out <- data.out %>% add_row(Scenario = scenario.id,
DCI_symm = dci.symm$index,
DCI_asym = dci.asym$index)
# Return output
# return(graph.out)
return(data.out)
}
# ---------------------------------------------------------------------
# Declare data
file.data.tu <- paste0(getwd(), '/TU/TU_BearLake.xlsx')
file.data.nabd <- paste0(getwd(), '/NABD/NABD_SnakeBear.csv')
# Load data
data.tu <- import_list(file.data.tu)
data.nabd <- read.csv(file = file.data.nabd, header = TRUE)
# Format Data - NABD
data.nabd.join <- data.nabd %>%
select(Name,BarrierType,
River,
lat, lon,
SARPID,
Passability,
Removed,
YearRemoved) %>%
rename(BarrierName = Name,
StreamName = River,
Lat = lat,
Lon = lon,
SourceID = SARPID,
Mitigated = Removed,
YearMitigated = YearRemoved) %>%
mutate(Source = 'National Aquatic Barrier Dataset (SARP)',
Pass_NABD = Passability) %>%
# Passability from ratings
mutate(Pass_Before = ifelse(Pass_NABD == 'Complete barrier', 0.0,
ifelse(Pass_NABD == 'Unknown', NA,
ifelse(Pass_NABD %in% c('Partial passability', 'Partial passability - salmonid'),
0.5, 1.0)))) %>%
# Passability unknown - estimated from barrier type
mutate(Pass_Before = ifelse(Pass_NABD == 'Unknown' & BarrierType == 'Dam', 0,
ifelse(Pass_NABD == 'Unknown' & BarrierType == 'Assessed road-related barrier',
0.5, Pass_Before))) %>%
mutate(Pass_After = Pass_Before) %>%
select(BarrierName, BarrierType, StreamName, Source, SourceID,
Lat, Lon,
Mitigated, YearMitigated, Pass_NABD, Pass_Before, Pass_After) %>%
as.data.frame
# Format TU Data - Culverts
data.tu.culverts <- data.tu[['Culverts']] %>%
rename(BarrierName = `Culvert/Road Name`,
StreamName = `Waterway Name`,
Lat = `Culvert LAT`,
Lon = `Culvert LONG`,
YearMitigated = `Year Replaced`,
Pass_Before = `Culvert Passage before`,
Pass_After = `Culvert Passage after`) %>%
mutate(BarrierType = 'Culvert',
Source = 'Trout Unlimited (TU)',
SourceID = paste0('TU_CUL_', CUL_ID),
Mitigated = 'yes',
Pass_NABD = NA) %>%
select(BarrierName, BarrierType, StreamName, Source, SourceID,
Lat, Lon,
Mitigated, YearMitigated, Pass_NABD, Pass_Before, Pass_After) %>%
as.data.frame
# Format TU Data - Diversions
data.tu.diversions <- data.tu[['Diversions']] %>%
rename(BarrierName = `Div Name`,
StreamName = `Waterway Name`,
Lat = `Div LAT`,
Lon = `Div LONG`,
Mitigated = `Div struct Rebuild     (Y/N)`,
YearMitigated = `Div Rebuild Year      (YYYY)`,
Pass_Before = `Diversion Passability Before`,
Pass_After = `Diversion Passability After`) %>%
mutate(BarrierType = 'Diversion',
Source = 'Trout Unlimited (TU)',
SourceID = paste0('TU_DIV_', `Div #`),
Pass_NABD = NA,
Pass_After = as.numeric(Pass_After)) %>%
mutate(YearMitigated = as.numeric(YearMitigated)) %>%
select(BarrierName, BarrierType, StreamName, Source, SourceID,
Lat, Lon,
Mitigated, YearMitigated, Pass_NABD, Pass_Before, Pass_After) %>%
as.data.frame
# Combine and export datasets
data.barriers <- do.call(rbind, list(data.nabd.join, data.tu.culverts, data.tu.diversions))
# Initialize output
data.results <- list()
data.results[['Data_Barriers']] <- data.barriers
# ---------------------------------------------------------------------------- #
# Declare working directory
pwd <- paste0(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(pwd)
# Write output
export(data.results, file = 'Data_Results.xlsx')
# Declare working directory
pwd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(pwd)
# Declare data
file.data.network <- paste0(getwd(), '/Spatial/CONN_Network_BearLake.csv')
file.data.results <- paste0(getwd(), '/Data_Results.xlsx')
# Load data
data.network<- read.csv(file.data.network, header = TRUE)
data.results <- rio::import_list(file = file.data.results)
# Initialize output
data.results[['Data_Network']] <- data.network
# ---------------------------------------------------------------------------- #
# Declare working directory
pwd <- paste0(dirname(rstudioapi::getSourceEditorContext()$path))
setwd(pwd)
# Write output
export(data.results, file = 'Data_Results.xlsx')
# Declare working directory
pwd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(pwd)
# Declare data
file.data.results <- paste0(getwd(), '/Data_Results.xlsx')
# Load data
data.results <- rio::import_list(file = file.data.results)
# Declare stream network
data.network <- data.results[['Data_Network']]
# Add Field: UID (unique identifers for stream network nodes)
# Generate sequence of random numbers
set.seed(22)
# uid.seq <- str_pad(sample(999999, size = nrow(data.network)), width = 6, pad = '0')
data.network <- data.network %>%
mutate(UID = paste0('UID_', str_pad(sample(x = 999999, size = n()), width = 6, pad = '0'))) %>%
as.data.frame
View(data.network)
# Add Field: Barrier_Expected (whether node is a dam/diversion/culvert or junction)
data.network <- data.network %>%
mutate(Barrier_Expected = ifelse(is.na(BarrierType), 'Junction', BarrierType)) %>%
as.data.frame
str(data.network)
nrow(data.network %>% filter(Barrier_Expected != 'Junction'))
length(unique(data.network$From_Node))
length(unique(data.network$To_Node))
# Declare stream network
data.network <- data.results[['Data_Network']]
# Add Field: UID (unique identifers for stream network nodes)
# Generate sequence of random numbers
set.seed(22)
# uid.seq <- str_pad(sample(999999, size = nrow(data.network)), width = 6, pad = '0')
data.network <- data.network %>%
mutate(UID = paste0('UID_', str_pad(sample(x = 999999, size = n()), width = 6, pad = '0'))) %>%
as.data.frame
# Add Field: Barrier_Expected (whether node is a dam/diversion/culvert or junction)
data.network <- data.network %>%
mutate(Barrier_Expected = ifelse(is.na(BarrierType), 'Junction', BarrierType)) %>%
rename(Length_KM = Length_km) %>%
as.data.frame
# Declare connectivity fields
graph.fields        <- c('From_Node', 'To_Node', 'Length_KM', 'UID', 'Barrier_Expected') # Fields to build graph with
attributes.edgeType <- 'Barrier_Expected' # String corresponding to barrier type.
attributes.edge     <- c('UID', 'Barrier_Expected') # Strings corresponding to edge (barrier) attributes.
attributes.node     <- c('From_Node', 'Length_KM') # String corresponding to node (stream segment) attributes. A field to weight connectivity indices is required, commonly assessed as length or HSI.
field.weight        <- 'Length_KM' # String corresponding to node attribute used to weight connectivity indices.
file.graph          <- 'iGraph_Network.png' # String indicating the name of the output file used to check igraph structure.
# Filter data for igraph
# NOTE: Input data represents the edge list
data.graph <- data.network %>% select({{graph.fields}})
# Check network structure
data.check <- network_check(inData = data.graph,
From_field = From_Node,
To_field = To_Node)
View(data.check)
# Set outlet node as the 'From_Node' on the terminal reach
outlet <- data.check$Terminal_Reaches$From_Node
# Generate igraph object
graph.stream <- generate_attributed_igraph(inData          = data.graph,
From_field      = From_Node,
To_field        = To_Node,
EdgeType_field  = {{attributes.edgeType}},
Edge_attributes = {{attributes.edge}},
Node_attributes = {{attributes.node}},
Outlet_node     = outlet,
graphFile       = file.graph)
index_calculation(graph = graph.stream,
weight = field.weight,
B_ij_flag = FALSE,
dir_fragmentation_type = 'symmetric')
# Declare barrier data
data.barriers <- data.network %>%
filter(BarrierType != 'Junction') %>%
mutate(Mitigated = ifelse(Pass_Before == Pass_After, 'No', 'Yes'),
YearMitigated = ifelse(Pass_Before == Pass_After, NA, YearMitigated)) %>%
mutate(Pass_Before = ifelse(UID == 'UID_036254', Pass_After, Pass_Before)) %>%
select(UID, YearMitigated, Pass_Before, Pass_After) %>%
as.data.frame
View(data.barriers)
# Determine barrier removal timestep for analysis
year.rmv <- unique(data.barriers %>% filter(!is.na(YearMitigated)) %>% select(YearMitigated)) %>%
dplyr::arrange(YearMitigated)
year.rmv
# Generate list of barrier passability scenarios (i.e. changes to pass through time)
scenarios.barrier <- list()
# Base scenario with all barriers
scenarios.barrier[['SCN_0000_AllBarriers']] <- data.barriers %>% mutate(Pass_R = Pass_Before) %>% as.data.frame
# Create list of barrier scenarios
for(i in 1:nrow(year.rmv)){
scenario.id <- paste0('SCN_', year.rmv[['YearMitigated']][[i]])
scenarios.barrier[[scenario.id]] <- data.barriers %>%
mutate(Pass_R = ifelse(is.na(YearMitigated) | YearMitigated > year.rmv[['YearMitigated']][[i]],
Pass_Before, Pass_After)) %>%
as.data.frame
}
# Alternative scenario for North Eden w/o Diversion Structure installed
# NOTE: NE Creek diversion is a seasonally-installed earthwork dam that creates an impassable barrier
#       but doesn't require infrastructure work for removal
scenarios.barrier[['SCN_2025_Alt']] <- scenarios.barrier[['SCN_2025']] %>%
mutate(Pass_R = ifelse(UID == 'UID_938461', 1, Pass_R)) %>%
as.data.frame
View(scenarios.barrier)
# Declare inputs
connectivity.field.pass   <- 'Pass_R'
connectivity.field.weight <- 'Length_KM'
# Initialize output
connectivity.out <- data.frame(Scenario = character(0),
DCI_symm = numeric(0),
DCI_asym = numeric(0))
# Calculate DCI connectivity for all barrier passability scenarios in list
for(i in 1:length(scenarios.barrier)){
# Declare scenario
scenario.id <- names(scenarios.barrier)[[i]]
# Join scenario barrier passability data to network
graph.barriers <- join_edge_attributes(inGraph = graph.stream,
inData = scenarios.barrier[[i]],
field.pass = 'Pass_R')
# Calculate DCI
data.connectivity <- calculate_dci(inGraph = graph.barriers,
scenario.id = scenario.id,
field.pass = 'Pass_R',
field.weight = 'Length_KM')
# Add data to output
connectivity.out <- rbind(connectivity.out, data.connectivity)
}
View(connectivity.out)
View(connectivity.out)
View(data.barriers)
View(data.network %>% filter(BarrierType != 'Junction'))
# Declare barrier data
data.barriers <- data.network %>%
filter(BarrierType != 'Junction') %>%
mutate(Mitigated = ifelse(Pass_Before == Pass_After, 'No', 'Yes'),
YearMitigated = ifelse(Pass_Before == Pass_After, NA, YearMitigated)) %>%
mutate(Pass_Before = ifelse(UID == 'UID_036254', Pass_After, Pass_Before)) %>%
select(UID, YearMitigated, Pass_Before, Pass_After) %>%
as.data.frame
# Determine barrier removal timestep for analysis
year.rmv <- unique(data.barriers %>% filter(!is.na(YearMitigated)) %>% select(YearMitigated)) %>%
dplyr::arrange(YearMitigated)
# Generate list of barrier passability scenarios (i.e. changes to pass through time)
scenarios.barrier <- list()
# Base scenario with all barriers
scenarios.barrier[['SCN_0000_AllBarriers']] <- data.barriers %>% mutate(Pass_R = Pass_Before) %>% as.data.frame
# Create list of barrier scenarios
for(i in 1:nrow(year.rmv)){
scenario.id <- paste0('SCN_', year.rmv[['YearMitigated']][[i]])
scenarios.barrier[[scenario.id]] <- data.barriers %>%
mutate(Pass_R = ifelse(is.na(YearMitigated) | YearMitigated > year.rmv[['YearMitigated']][[i]],
Pass_Before, Pass_After)) %>%
as.data.frame
}
# Alternative scenario for North Eden w/o Diversion Structure installed
# NOTE: NE Creek diversion is a seasonally-installed earthwork dam that creates an impassable barrier
#       but doesn't require infrastructure work for removal
# Lookup TU_DIV_NE-01: View(data.network %>% filter(BarrierType != 'Junction'))
scenarios.barrier[['SCN_2025_Alt']] <- scenarios.barrier[['SCN_2025']] %>%
mutate(Pass_R = ifelse(UID == 'UID_717090', 1, Pass_R)) %>%
as.data.frame
# Declare inputs
connectivity.field.pass   <- 'Pass_R'
connectivity.field.weight <- 'Length_KM'
# Initialize output
connectivity.out <- data.frame(Scenario = character(0),
DCI_symm = numeric(0),
DCI_asym = numeric(0))
# Calculate DCI connectivity for all barrier passability scenarios in list
for(i in 1:length(scenarios.barrier)){
# Declare scenario
scenario.id <- names(scenarios.barrier)[[i]]
# Join scenario barrier passability data to network
graph.barriers <- join_edge_attributes(inGraph = graph.stream,
inData = scenarios.barrier[[i]],
field.pass = 'Pass_R')
# Calculate DCI
data.connectivity <- calculate_dci(inGraph = graph.barriers,
scenario.id = scenario.id,
field.pass = 'Pass_R',
field.weight = 'Length_KM')
# Add data to output
connectivity.out <- rbind(connectivity.out, data.connectivity)
}
connectivity.out
40 - 26
str(data.barriers)
str(data.network)
unique(data.network)
unique(data.network$Barrier_Expected)
# Lookup barriers by year
barriers.rmv <- data.network %>%
filter(! Barrier_Expected %in% c('Junction', 'Terminus')) %>%
filter(Pass_Before != Pass_After) %>%
as.data.frame
View(barriers.rmv)
# Declare barrier data
data.barriers <- data.network %>%
filter(BarrierType != 'Junction') %>%
mutate(Mitigated = ifelse(Pass_Before == Pass_After, 'No', 'Yes'),
YearMitigated = ifelse(Pass_Before == Pass_After, NA, YearMitigated)) %>%
mutate(Pass_Before = ifelse(UID == 'UID_036254', Pass_After, Pass_Before)) %>%
mutate(YearMitigated = ifelse(SourceID == 'TU_DIV_SW-01', 2005, YearMitigated))
select(UID, YearMitigated, Pass_Before, Pass_After) %>%
as.data.frame
# Determine barrier removal timestep for analysis
year.rmv <- unique(data.barriers %>% filter(!is.na(YearMitigated)) %>% select(YearMitigated)) %>%
dplyr::arrange(YearMitigated)
# Generate list of barrier passability scenarios (i.e. changes to pass through time)
scenarios.barrier <- list()
# Base scenario with all barriers
scenarios.barrier[['SCN_0000_AllBarriers']] <- data.barriers %>% mutate(Pass_R = Pass_Before) %>% as.data.frame
# Create list of barrier scenarios
for(i in 1:nrow(year.rmv)){
scenario.id <- paste0('SCN_', year.rmv[['YearMitigated']][[i]])
scenarios.barrier[[scenario.id]] <- data.barriers %>%
mutate(Pass_R = ifelse(is.na(YearMitigated) | YearMitigated > year.rmv[['YearMitigated']][[i]],
Pass_Before, Pass_After)) %>%
as.data.frame
}
# Alternative scenario for North Eden w/o Diversion Structure installed
# NOTE: NE Creek diversion is a seasonally-installed earthwork dam that creates an impassable barrier
#       but doesn't require infrastructure work for removal
# Lookup TU_DIV_NE-01: View(data.network %>% filter(BarrierType != 'Junction'))
scenarios.barrier[['SCN_2025_Alt']] <- scenarios.barrier[['SCN_2025']] %>%
mutate(Pass_R = ifelse(UID == 'UID_717090', 1, Pass_R)) %>%
as.data.frame
# Declare barrier data
data.barriers <- data.network %>%
filter(BarrierType != 'Junction') %>%
mutate(Mitigated = ifelse(Pass_Before == Pass_After, 'No', 'Yes'),
YearMitigated = ifelse(Pass_Before == Pass_After, NA, YearMitigated)) %>%
mutate(Pass_Before = ifelse(UID == 'UID_036254', Pass_After, Pass_Before)) %>%
mutate(YearMitigated = ifelse(SourceID == 'TU_DIV_SW-01', 2005, YearMitigated))
select(UID, YearMitigated, Pass_Before, Pass_After) %>%
as.data.frame
# Declare barrier data
data.barriers <- data.network %>%
filter(BarrierType != 'Junction') %>%
mutate(Mitigated = ifelse(Pass_Before == Pass_After, 'No', 'Yes'),
YearMitigated = ifelse(Pass_Before == Pass_After, NA, YearMitigated)) %>%
mutate(Pass_Before = ifelse(UID == 'UID_036254', Pass_After, Pass_Before)) %>%
mutate(YearMitigated = ifelse(SourceID == 'TU_DIV_SW-01', 2005, YearMitigated))
select(UID, YearMitigated, Pass_Before, Pass_After) %>%
as.data.frame
# Declare barrier data
data.barriers <- data.network %>%
filter(BarrierType != 'Junction') %>%
mutate(Mitigated = ifelse(Pass_Before == Pass_After, 'No', 'Yes'),
YearMitigated = ifelse(Pass_Before == Pass_After, NA, YearMitigated)) %>%
mutate(Pass_Before = ifelse(UID == 'UID_036254', Pass_After, Pass_Before)) %>%
mutate(YearMitigated = ifelse(SourceID == 'TU_DIV_SW-01', 2005, YearMitigated))
select(UID, YearMitigated, Pass_Before, Pass_After) %>%
as.data.frame
str(data.barriers)
str(data.network)
data.barriers <- data.network %>%
filter(BarrierType != 'Junction')
data.barriers <- data.network %>%
filter(BarrierType != 'Junction') %>%
mutate(Mitigated = ifelse(Pass_Before == Pass_After, 'No', 'Yes')
# Declare barrier data
data.barriers <- data.network %>%
filter(BarrierType != 'Junction') %>%
mutate(Mitigated = ifelse(Pass_Before == Pass_After, 'No', 'Yes'),
YearMitigated = ifelse(Pass_Before == Pass_After, NA, YearMitigated)) %>%
data.barriers <- data.network %>%
filter(BarrierType != 'Junction') %>%
mutate(Mitigated = ifelse(Pass_Before == Pass_After, 'No', 'Yes'),
YearMitigated = ifelse(Pass_Before == Pass_After, NA, YearMitigated))
# Declare barrier data
data.barriers <- data.network %>%
filter(BarrierType != 'Junction') %>%
mutate(Mitigated = ifelse(Pass_Before == Pass_After, 'No', 'Yes'),
YearMitigated = ifelse(Pass_Before == Pass_After, NA, YearMitigated)) %>%
mutate(Pass_Before = ifelse(UID == 'UID_036254', Pass_After, Pass_Before))
# Declare barrier data
data.barriers <- data.network %>%
filter(BarrierType != 'Junction') %>%
mutate(Mitigated = ifelse(Pass_Before == Pass_After, 'No', 'Yes'),
YearMitigated = ifelse(Pass_Before == Pass_After, NA, YearMitigated)) %>%
mutate(Pass_Before = ifelse(UID == 'UID_036254', Pass_After, Pass_Before)) %>%
mutate(YearMitigated = ifelse(SourceID == 'TU_DIV_SW-01', 2005, YearMitigated))
# Declare barrier data
data.barriers <- data.network %>%
filter(BarrierType != 'Junction') %>%
mutate(Mitigated = ifelse(Pass_Before == Pass_After, 'No', 'Yes'),
YearMitigated = ifelse(Pass_Before == Pass_After, NA, YearMitigated)) %>%
mutate(Pass_Before = ifelse(UID == 'UID_036254', Pass_After, Pass_Before)) %>%
mutate(YearMitigated = ifelse(SourceID == 'TU_DIV_SW-01', 2005, YearMitigated)) %>%
select(UID, YearMitigated, Pass_Before, Pass_After) %>%
as.data.frame
# Determine barrier removal timestep for analysis
year.rmv <- unique(data.barriers %>% filter(!is.na(YearMitigated)) %>% select(YearMitigated)) %>%
dplyr::arrange(YearMitigated)
# Generate list of barrier passability scenarios (i.e. changes to pass through time)
scenarios.barrier <- list()
# Base scenario with all barriers
scenarios.barrier[['SCN_0000_AllBarriers']] <- data.barriers %>% mutate(Pass_R = Pass_Before) %>% as.data.frame
# Create list of barrier scenarios
for(i in 1:nrow(year.rmv)){
scenario.id <- paste0('SCN_', year.rmv[['YearMitigated']][[i]])
scenarios.barrier[[scenario.id]] <- data.barriers %>%
mutate(Pass_R = ifelse(is.na(YearMitigated) | YearMitigated > year.rmv[['YearMitigated']][[i]],
Pass_Before, Pass_After)) %>%
as.data.frame
}
# Alternative scenario for North Eden w/o Diversion Structure installed
# NOTE: NE Creek diversion is a seasonally-installed earthwork dam that creates an impassable barrier
#       but doesn't require infrastructure work for removal
# Lookup TU_DIV_NE-01: View(data.network %>% filter(BarrierType != 'Junction'))
scenarios.barrier[['SCN_2025_Alt']] <- scenarios.barrier[['SCN_2025']] %>%
mutate(Pass_R = ifelse(UID == 'UID_717090', 1, Pass_R)) %>%
as.data.frame
# Declare inputs
connectivity.field.pass   <- 'Pass_R'
connectivity.field.weight <- 'Length_KM'
# Initialize output
connectivity.out <- data.frame(Scenario = character(0),
DCI_symm = numeric(0),
DCI_asym = numeric(0))
# Calculate DCI connectivity for all barrier passability scenarios in list
for(i in 1:length(scenarios.barrier)){
# Declare scenario
scenario.id <- names(scenarios.barrier)[[i]]
# Join scenario barrier passability data to network
graph.barriers <- join_edge_attributes(inGraph = graph.stream,
inData = scenarios.barrier[[i]],
field.pass = 'Pass_R')
# Calculate DCI
data.connectivity <- calculate_dci(inGraph = graph.barriers,
scenario.id = scenario.id,
field.pass = 'Pass_R',
field.weight = 'Length_KM')
# Add data to output
connectivity.out <- rbind(connectivity.out, data.connectivity)
}
connectivity.out
